angular.module('ionicApp', ['ionic', 'ngSanitize'])

  .factory('DbService', function ($sce) {

  var db = {'effects': [
["Damage Health",3,0],
["Damage Stamina",43,0],
["Damage Stamina Regen",159,0],
["Fortify Block",118,1],
["Fortify Illusion",94,1],
["Fortify Light Armor",55,1],
["Fortify Magicka",71,1],
["Fortify Sneak",118,1],
["Fortify Stamina",71,1],
["Invisibility",261,1],
["Lingering Damage Magicka",71,0],
["Paralysis",285,0],
["Ravage Health",6,0],
["Ravage Stamina",24,0],
["Regenerate Magicka",177,1],
["Resist Frost",86,1],
["Resist Magic",51,1],
["Restore Magicka",25,1],
["Restore Stamina",25,1],
["Slow",247,0],
["Weakness to Magic",51,0],
["Weakness to Poison",51,0],
["Weakness to Shock",56,0]
  ],
  'ingreds': [
["Briar Heart",[17,3,11,6]],
["Crimson Nirnroot",[0,1,9,16]],
["Deathbell",[0,13,19,21]],
["Dwarven Oil",[20,4,14,17]],
["Giant Lichen",[22,12,21,17]],
["Honeycomb",[18,3,5,13]],
["Human Flesh",[0,11,17,7]],
["Large Antlers",[18,8,19,2]],
["Nirnroot",[0,1,9,16]],
["Purple Mountain Flower",[18,7,10,15]],
["Silverside Perch",[18,2,12,15]],
["Skeever Tail",[2,12,0,5]],
["Taproot",[20,4,14,17]],
["Torchbug Thorax",[18,10,20,8]],
["Void Salts",[22,16,0,6]]
  ],
  'recipes': [
[495,[1,8],[0,9,1,16]],
[431,[2,7,10],[18,19,2]],
[428,[0,5,6],[11,17,3]],
[428,[0,6,9],[7,11,17]],
[411,[2,7,11],[0,19,2]],
[384,[0,6,14],[0,6,11,17]],
[348,[0,6,8],[0,11,17]],
[347,[3,12],[4,14,17,20]],
[343,[2,7,13],[8,18,19]],
[320,[0,1,6],[0,11,17]],
[315,[0,2,6],[0,11,17]],
[313,[0,6,11],[0,11,17]],
[310,[0,6],[11,17]],
[298,[2,4,7],[19,21]],
[296,[2,5,7],[13,18,19]],
[285,[2,7,8],[0,19]],
[276,[9,10,11],[12,15,18,2]],
[272,[2,7,9],[18,19]],
[270,[7,9,10],[15,18,2]],
[257,[1,2,7],[0,19]],
[255,[7,10,13],[8,18,2]],
[255,[7,11,13],[8,18,2]],
[252,[2,6,7],[0,19]],
[252,[2,7,14],[0,19]],
[247,[2,7],[19]],
[245,[5,10,11],[5,12,18,2]],
[239,[5,7,11],[5,18,2]],
[229,[6,9,10],[7,15,18]],
[214,[6,9,13],[7,10,18]],
[203,[8,10,11],[0,12,2]],
[197,[7,8,11],[0,2]],
[190,[4,7,10],[12,18,2]],
[190,[7,10,11],[12,18,2]],
[190,[10,11,13],[12,18,2]],
[189,[0,5,14],[6,3]],
[184,[7,9,11],[18,2]],
[184,[7,10],[18,2]],
[182,[9,10,13],[10,15,18]],
[175,[1,10,11],[0,12,2]],
[173,[0,5,11],[5,3]],
[170,[2,10,11],[0,12,2]],
[169,[1,7,11],[0,2]],
[168,[6,10,11],[0,12,2]],
[168,[10,11,14],[0,12,2]],
[167,[7,9,13],[8,10,18]],
[165,[4,7,11],[12,2]],
[165,[10,11],[12,2]],
[162,[6,7,11],[0,2]],
[162,[7,11,14],[0,2]],
[160,[0,8,14],[0,6,16]],
[159,[7,11],[2]],
[156,[6,8,9],[0,7]],
[152,[0,4,14],[6,17,22]],
[147,[3,7,13],[8,18,20]],
[147,[3,9,13],[10,18,20]],
[147,[7,12,13],[8,18,20]],
[147,[9,12,13],[10,18,20]],
[145,[4,8,14],[0,16,22]],
[143,[0,3,5],[17,3]],
[143,[0,4,5],[17,3]],
[143,[0,5,7],[18,3]],
[143,[0,5,9],[18,3]],
[143,[0,5,10],[18,3]],
[143,[0,5,12],[17,3]],
[143,[0,5,13],[18,3]],
[143,[3,6,9],[7,17]],
[143,[4,6,9],[7,17]],
[143,[5,6,9],[7,18]],
[143,[6,7,9],[7,18]],
[143,[6,9,12],[7,17]],
[142,[0,2,5],[13,3]],
[132,[0,1,14],[0,6,16]],
[128,[1,6,9],[0,7]],
[123,[2,6,9],[0,7]],
[121,[6,9,11],[0,7]],
[121,[6,9,14],[0,7]],
[118,[0,5],[3]],
[118,[6,9],[7]],
[117,[1,4,14],[0,16,22]],
[117,[4,9,10],[12,15,18]],
[112,[2,4,14],[0,21,22]],
[111,[9,10],[15,18]],
[96,[0,3,14],[6,17]],
[96,[0,12,14],[6,17]],
[96,[7,13],[8,18]],
[96,[9,13],[10,18]],
[93,[5,8,11],[0,5]],
[89,[2,4,8],[0,21]],
[89,[8,14],[0,16]],
[84,[2,5,11],[0,5,13]],
[84,[4,6,14],[0,17,22]],
[81,[2,4,6],[0,17,21]],
[81,[3,4,14],[17,22]],
[81,[4,12,14],[17,22]],
[80,[5,9,11],[5,18]],
[80,[5,11,13],[5,18]],
[76,[0,2,4],[17,21]],
[76,[0,2,14],[0,6]],
[76,[0,3,13],[17,20]],
[76,[0,12,13],[17,20]],
[76,[2,3,4],[17,21]],
[76,[2,4,12],[17,21]],
[76,[3,4,13],[17,20]],
[76,[3,5,13],[18,20]],
[76,[3,6,13],[17,20]],
[76,[3,10,13],[18,20]],
[76,[4,12,13],[17,20]],
[76,[5,12,13],[18,20]],
[76,[6,12,13],[17,20]],
[76,[10,12,13],[18,20]],
[75,[2,4,5],[13,21]],
[74,[0,11,14],[0,6]],
[71,[0,14],[6]],
[65,[1,5,11],[0,5]],
[65,[4,11,14],[0,12,22]],
[63,[3,6,8],[0,17]],
[63,[4,6,8],[0,17]],
[63,[6,8,12],[0,17]],
[62,[2,4,11],[0,12,21]],
[62,[2,5,8],[0,13]],
[62,[4,10,14],[12,22]],
[61,[1,2,4],[0,21]],
[61,[1,14],[0,16]],
[61,[4,5,11],[5,12]],
[58,[5,6,11],[0,5]],
[58,[5,11,14],[0,5]],
[57,[2,4,10],[12,21]],
[56,[4,14],[22]],
[55,[5,11],[5]],
[51,[2,4],[21]],
[51,[3,13],[20]],
[51,[12,13],[20]],
[49,[2,5,9],[13,18]],
[49,[2,5,10],[13,18]],
[49,[2,5,13],[13,18]],
[44,[4,8,11],[0,12]],
[38,[2,8],[0]],
[38,[6,8],[0]],
[38,[8,11],[0]],
[35,[1,3,6],[0,17]],
[35,[1,4,6],[0,17]],
[35,[1,6,12],[0,17]],
[34,[1,2,5],[0,13]],
[34,[4,6,11],[0,12,17]],
[31,[0,4,10],[12,17]],
[31,[0,4,11],[12,17]],
[31,[3,4,10],[12,17]],
[31,[3,4,11],[12,17]],
[31,[4,5,10],[12,18]],
[31,[4,6,10],[12,17]],
[31,[4,10,12],[12,17]],
[31,[4,10,13],[12,18]],
[31,[4,11,12],[12,17]],
[30,[2,3,6],[0,17]],
[30,[2,6,12],[0,17]],
[29,[2,5,6],[0,13]],
[29,[2,5,14],[0,13]],
[28,[3,6,11],[0,17]],
[28,[3,6,14],[0,17]],
[28,[6,11,12],[0,17]],
[28,[6,12,14],[0,17]],
[25,[0,3],[17]],
[25,[0,4],[17]],
[25,[0,12],[17]],
[25,[3,4],[17]],
[25,[3,6],[17]],
[25,[4,6],[17]],
[25,[4,12],[17]],
[25,[5,7],[18]],
[25,[5,9],[18]],
[25,[5,10],[18]],
[25,[5,13],[18]],
[25,[6,12],[17]],
[25,[7,9],[18]],
[25,[10,13],[18]],
[24,[2,5],[13]],
[16,[1,4,11],[0,12]],
[10,[1,2],[0]],
[10,[1,6],[0]],
[10,[1,11],[0]],
[6,[4,10],[12]],
[6,[4,11],[12]],
[5,[2,6],[0]],
[5,[2,11],[0]],
[5,[2,14],[0]],
[3,[6,11],[0]],
[3,[6,14],[0]],
[3,[11,14],[0]]
  ]};

  db.effect_item =  function(e){
    return  $sce.trustAsHtml(
	    '<scan class="'+(!db.effects[e][2] ? "assertive" : "balanced")+'">'+
      	db.effects[e][0]+'</scan>'
  )};

  db.effect_list = function (elist) {
    var string = elist.map(function(e){
      return '<scan class="'+(!db.effects[e][2] ? "assertive" : "balanced")+'">'+
        db.effects[e][0]+'</scan>'+
        (e === elist[elist.length - 1] ? "" : ", ");
    }).join("");
    return $sce.trustAsHtml(string);
  };

  db.ingred_list = function (e) {
    return db.ingreds.filter(function(i) {
      return i[1].indexOf(e) !== -1;
    }).map(function(i){
      return i[0];
    }).join(", ");
  };

  db.refresh = function () {
    for (var i = 0; i < db.ingreds.length; i++) {
      db.ingreds[i][2] = true;
    };
  };
  db.refresh();

  return {
  	all: function () {return db}
  };
})

.config(function($stateProvider, $urlRouterProvider, $ionicConfigProvider) {

  $ionicConfigProvider.tabs.position('bottom');

  $stateProvider
    .state('tabs', {
      url: "/tab",
      abstract: true,
      templateUrl: "templates/tabs.html"
    })
    .state('tabs.recipes', {
      url: "/recipes",
      views: {
        'recipes-tab': {
          templateUrl: "templates/recipes.html",
          controller: 'RecipesTabCtrl'
        }
      }
    })
    .state('tabs.ingreds', {
      url: "/ingreds",
      views: {
        'ingreds-tab': {
          templateUrl: "templates/ingreds.html",
          controller: 'IngredsTabCtrl'
        }
      }
    })
    .state('tabs.effects', {
      url: "/effects",
      views: {
        'effects-tab': {
          templateUrl: "templates/effects.html",
          controller: 'EffectsTabCtrl'
        }
      }
    })
    .state('tabs.opyions', {
      url: "/options",
      views: {
        'options-tab': {
          templateUrl: "templates/options.html",
          controller: 'OptionsTabCtrl'
        }
      }
    });
   $urlRouterProvider.otherwise("/tab/recipes");
})

.controller('RecipesTabCtrl', function($scope, DbService) {
  $scope.db = DbService.all();

  $scope.available = function() {
    return function(recipe) {
      return recipe[1].every(function(i) {
        return $scope.db.ingreds[i][2];
      })
    }
  };

  $scope.set_off = function(i) {
    $scope.db.ingreds[i][2] = false;
  };
})

.controller('IngredsTabCtrl', function($scope, DbService) {
  $scope.db = DbService.all();
})

.controller('EffectsTabCtrl', function($scope, DbService) {
  $scope.db = DbService.all();
})

.controller('OptionsTabCtrl', function($scope, DbService) {
  $scope.db = DbService.all();
});
